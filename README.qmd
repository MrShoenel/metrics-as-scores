---
title: "Metrics As Scores [![DOI](https://zenodo.org/badge/524333119.svg)](https://zenodo.org/badge/latestdoi/524333119) [![status](https://joss.theoj.org/papers/eb549efe6c0111490395496c68717579/status.svg)](https://joss.theoj.org/papers/eb549efe6c0111490395496c68717579)"
top-level-division: section
jupyter: python3
bibliography:
  - refs.bib
  - src/metrics_as_scores/datasets/known-datasets.bib
  
format:
  gfm:
    citeproc: true
    toc: true
    toc-depth: 3
    number-sections: true
---


```{python}
#| echo: false

from IPython.display import display, Markdown
from pathlib import Path
from sys import path
from os import getcwd

root = Path(getcwd())
path.append(str(root.joinpath('./src').resolve()))

from metrics_as_scores.__version__ import __version__ as MAS_VERSION

dm = lambda s: display(Markdown(s))
```

-----------------

```{python}
#| echo: false

dm(f'''
**Please Note**: ___Metrics As Scores___ (`MAS`) changed considerably between versions [**`v1.0.8`**](/MrShoenel/metrics-as-scores/tree/v1.0.8) and **`v2.x.x`**.

The current version is `v{MAS_VERSION}`.
'''.strip())
```


Version **`v2.x.x`** has the following new features:

- [Textual User Interface (TUI)](#sec-tui)
- Proper documentation and testing
- New version on PyPI. Install the package and run the command line interface by typing **`mas`**!


-----------------

Contains the data and scripts needed for the application __`Metrics as Scores`__, check out <https://metrics-as-scores.ml/>.

```{python}
#| echo: false

dm(f'''
This package accompanies the paper entitled "_Contextual Operationalization of Metrics As Scores: Is My Metric Value Good?_" [@honel2022qrs].
It seeks to answer the question whether or not the context a software metric was captured in, matters.
It enables the user to compare contexts and to understand their differences.
In order to answer the question of whether a metric value is actually good, we need to transform it into a **score**.
Scores are normalized **and rectified** distances, that can be compared in an apples-to-apples manner, across contexts.
The same metric value might be good in one context, while it is not in another.
To borrow an example from the context of software: It is much more acceptable (or common) to have large applications (in terms of lines of code) in the contexts/domains of games and databases than it is for the domains of IDEs and SDKs.
Given an *ideal* value for a metric (which may also be user-defined), we can transform observed metric values to distances from that value and then use the cumulative distribution function to map distances to scores.
'''.strip())
```


--------------



# Usage

You may install Metrics As Scores directly from PyPI.
For users that wish to [**contribute**](./CONTRIBUTING.md) to Metrics As Scores, a [development setup](#sec-dev-setup) is recommended.
In either case, after the installation, [**you have access to the text-based user interface**](#sec-tui).

```shell
# Installation from PyPI:
pip install metrics-as-scores
```

You can **bring up the TUI** simply by typing the following after installing or cloning the repo (see next section for more details):

```shell
mas
```

## Text-based User Interface (TUI) {#sec-tui}

Metrics As Scores features a text-based command line user interface (TUI).
It offers a couple of workflows/wizards, that help you to work and interact with the application.
There is no need to modify any source code, if you want to do one of the following:

- Show Installed Datasets
- Show List of Known Datasets Available Online That Can Be Downloaded
- Download and install a known or existing dataset
- Create Own Dataset to be used with Metrics-As-Scores
- Fit Parametric Distributions for Own Dataset
- Pre-generate distributions for usage in the [**Web-Application**](#sec-webapp)
- Bundle Own dataset so it can be published
- Run local, interactive Web-Application using a selected dataset


![Metrics As Scores Text-based User Interface (TUI)](./TUI.png "Metrics As Scores Text-based User Interface (TUI)")



## Web Application {#sec-webapp}

Metrics As Scores' main feature is perhaps the Web Application.
It can be run directly and locally from the TUI using a selected dataset (you may download a known dataset or use your own).
The Web Application allows to visually inspect each *quantity type* across all the defined contexts.
It feates the PDF/PMF, CDF and CCDF, as well as the PPF for each quantity in each context.
It offers five different principal types of densities: Parametric, Parametric (discrete), Empirical, Empirical (discrete), and (approximate) Kernel Density Estimation.
The Web Application includes a detailed [Help section](https://metrics-as-scores.ml/#help) that should answer most of your questions.


![Metrics As Scores Interactive Web Appliction](./WebApp.png "Metrics As Scores Interactive Web Appliction")

## Development Setup {#sec-dev-setup}

This project was developed using and requires Python `>=3.10`. Steps:

1. Clone the Repository,
2. Set up a virtual environment,
3. Install packages.

### Setting Up a Virtual Environment

It is recommended to use a virtual environment.
To use a virtual environment, follow these steps (Windows specific; activation of the environment might differ).

```shell
virtualenv --python=C:/Python310/python.exe venv # Use specific Python version for virtual environment
venv/Scripts/activate
```

Here is a Linux example that assumes you have Python `3.10` installed (this may also require installing `python3.10-venv` and/or `python3.10-dev`):

```shell
python3.10 -m venv venv
source venv/bin/activate # Linux
```

### Installing Packages

The project is managed with `Poetry`.
To install the required packages, simply run the following.

```shell
venv/Scripts/activate
# First install Poetry using pip:
(venv) C:\metrics-as-scores>pip install poetry
# Install the projects and its dependencies
(venv) C:\metrics-as-scores> poetry install
```

The same in Linux:

```shell
source venv/bin/activate # Linux
(venv) ubuntu@vm:/tmp/metrics-as-scores$ pip install poetry
(venv) ubuntu@vm:/tmp/metrics-as-scores$ poetry install
```


--------------


# Example Usage

_Metrics As Scores_ can be thought of an *interactive*, *multiple-ANOVA* analysis and explorer.
The analysis of variance (ANOVA; @chambers2017) is usually used to analyze the differences among *hypothesized* group means for a single *quantity*.
An ANOVA might be used to estimate the goodness-of-fit of a statistical model.
Beyond ANOVA, `MAS` seeks to answer the question of whether a sample of a certain quantity is more or less common across groups.
For each group, we can determine what might constitute a common/ideal value, and how distant the sample is from that value.
This is expressed in terms of a percentile (a standardized scale of `[0,1]`), which we call **score**.


## Software Metrics Example

Software metrics, when captured out of context, are meaningless [@gil2016software].
For example, typical values for complexity metrics are vastly different, depending on the type of application.
We find that, for example, applications of type SDK have a much lower *expected* complexity compared to Games (`1.9` vs. `3.1`) [@honel2022qrs].


Software metrics are often used in software quality models.
However, without knowledge of the application's context (here: domain), the deduced quality of these models is at least misleading, if not completely off.
This becomes apparent if we examine how an application's complexity scores across certain domains.


Since there are many software metrics that are captured simultaneously, we can also compare domains in their entirety:
How many metrics are statistically significantly different from each other?
Is there a set of domains that are not distinguishable from each other?
Are there metrics that are always different across contexts and must be used with care?


This example is available as a downloadable dataset [@dataset_qcc].
It is based on software metrics and application domains of the "Qualitas.class corpus" [@terra2013qcc; @tempero2010qualitas].


## Diamonds Example

The diamonds dataset [@ggplot2] holds prices of over 50,000 round cut diamonds.
It contains a number attributes for each diamond, such as its price, length, depth, or weight.
The dataset, however, features three quality attributes: The quality of the cut, the clarity, and the color.
Suppose we are interested in examining properties of diamonds of the highest quality only, across colors.
Therefore, we select only those diamonds from the dataset that have an *ideal* cut and the best (*IF*) clarity.
Now only the color quality gives a context to each diamonds and its attributes.


This constellation now allows us to examine differences across differently colored diamonds.
For example, there are considerable differences in price.
We find that only the group of diamonds of the best color is significantly different from the other groups.
This example is available as a downloadable dataset [@dataset_diamonds-ideal-if].


--------------



# Datasets

Metrics As Scores can use existing and own datasets. Please keep reading to learn how.

## Use Your Own

Metrics As Scores has a built-in wizard that lets you import your own dataset!
There is another wizard that bundles your dataset so that it can be shared with others.
You may [**contribute your dataset**](./CONTRIBUTING.md) so we can add it to the curated list of known datasets (see next section).
If you do not have an own dataset, you can use the built-in wizard to download any of the known datasets, too!


Note that Metrics As Scores supports you with all tools necessary to create a publishable dataset.
For example, it carries out the common statistical tests:

- ANOVA [@chambers2017]: Analysis of variance of your data across the available contexts.
- Tukey's Honest Significance Test (TukeyHSD; @tukey1949anova): This test is used to gain insights into the results of an ANOVA test. While the former only allows obtaining the amount of corroboration for the null hypothesis, TukeyHSD performs all pairwise comparisons (for all possible combinations of any two contexts).
- Two-sample T-test: Compares the means of two samples to give an indication whether or not they appear to come from the same distribution. Again, this is useful for comparing contexts.
Tukey's test is used to gain insights into the results of an ANOVA test.
While the former only allows obtaining the amount of corroboration for the null hypothesis, TukeyHSD performs all pairwise comparisons (for all possible combinations of any two contexts).

It also creates an **automatic report** based on these tests that you can simply render into a PDF using Quarto.


A publishable dataset must contain parametric fits and pre-generated densities (please check the wizard for these two).
Metrics As Scores can fit approximately **120** continuous and discrete random variables using `Pymoo` [@pymoo2020].
Note that Metrics As Scores also automatically carries out a number of goodness-of-fit tests.
The type of test also depends on the data (for example, not each test is valid for discrete data, such as the KS two-sample test).
These tests are then used to select some best fitting random variable for display in the web application.


* Cramér-von Mises- [@cramer1928] and Kolmogorov&ndash;Smirnov one-sample [@stephens1974] tests: After fitting a distribution, the sample is tested against the fitted parametric distribution. Since the fitted distribution cannot usually accommodate all of the sample's subtleties, the test will indicate whether the fit is acceptable or not.
* Cramér-von Mises- [@anderson1962], Kolmogorov&ndash;Smirnov-, and Epps&ndash;Singleton [@epps1986] two-sample tests: After fitting, we create a second sample by uniformly sampling from the `PPF`. Then, both samples can be used in these tests. The Epps&ndash;Singleton test is also applicable for discrete distributions.




## Known Datasets {#sec-known-datasets}

The following is a curated list of known, publicly available datasets that can be used with Metrics As Scores.
These datasets can be downloaded using the text-based user interface.

```{python}
#| echo: false

from metrics_as_scores.distribution.distribution import KnownDataset
from metrics_as_scores.cli.helpers import get_known_datasets, format_file_size

def format_dataset(ds: KnownDataset) -> str:
	return f'''
	- {ds["name"]} [@dataset_{ds["id"]}]. {format_file_size(num_bytes=ds["size_extracted"], digits=0)}. <{ds["info_url"]}>.
	'''.strip()

dm('\n'.join([format_dataset(ds) for ds in get_known_datasets()]))
```



--------------



# Personalizing the Web Application

The web application _"[Metrics As Scores](https://metrics-as-scores.ml/)"_ is located in the directory [`src/metrics_as_scores/webapp/`](./src/metrics_as_scores/webapp/).
The app itself has three vertical blocks: a header, the interactive part, and a footer.
Header and footer can be easily edited by modifing the files [`src/metrics_as_scores/webapp/header.html`](./src/metrics_as_scores/webapp/header.html) and [`src/metrics_as_scores/webapp/footer.html`](./src/metrics_as_scores/webapp/footer.html).


Note that when you create your own dataset, you get to add sections to the header and footer using two HTML fragments.
This is recommended over modifying the web application directly.


If you want to change the title of the application, you will have to modify the file [`src/metrics_as_scores/webapp/main.py`](./src/metrics_as_scores/webapp/main.py) at the very end:

```python
# Change this line to your desired title.
curdoc().title = "Metrics As Scores"
```

**Important**: If you modify the web application, you must always maintain two links: one to <https://metrics-as-scores.ml/> and one to this repository, that is, <https://github.com/MrShoenel/metrics-as-scores>.



# References {-}

<div id="refs"></div>
