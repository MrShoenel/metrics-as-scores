[tool.poetry]
name = "metrics-as-scores"
version = "2.3.0"
description = "Interactive web application, tool- and analysis suite for approximating, exploring, understanding, and sampling from conditional distributions."
authors = ["Sebastian HÃ¶nel <development@hoenel.net>"]
license = "Dual-licensed under GNU General Public License v3 (GPLv3) and closed-source"
readme = "README.md"
homepage = "https://github.com/mrshoenel/metrics-as-scores"
repository = "https://github.com/mrshoenel/metrics-as-scores/issues"
packages = [{include = "metrics_as_scores", from = "src"}]
include = ["src/metrics_as_scores/pyproject.toml"]
keywords = ["distribution fitting", "statistical tests", "context-dependent", "metrics", "quality", "score"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
		"Development Status :: 5 - Production/Stable",
		"Environment :: Web Environment",
		"Intended Audience :: Science/Research",
		"Intended Audience :: Education",
		"Intended Audience :: End Users/Desktop",
		"Topic :: Utilities"
]

[tool.poetry.scripts]
mas = "metrics_as_scores.cli.Cli:cli"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.poetry.dependencies]
python = ">=3.10, <3.12"
bokeh = "^2.4.3"
joblib = "^1.2.0"
jupyterlab = "^3.4.7"
matplotlib = "^3.6.0"
ptvsd = "^4.3.2"
pymoo = "^0.6.0"
scipy = "^1.9.1"
statsmodels = "^0.13.2"
StrEnum = "^0.4.8"
tqdm = "^4.64.1"
Sphinx = "^5.3.0"
sphinx-rtd-theme = "^1.1.1"
toml = "^0.10.2"
rich = "^13.3.1"
questionary = "^1.10.0"
tabulate = "^0.9.0"
scikit-learn = "^1.2.1"
nptyping = "^2.4.1"
pytest-cov = "^4.0.0"
poethepoet = "^0.18.1"
wget = "^3.2"


[tool.poetry.group.dev.dependencies]
twine = "^4.0.1"
build = "^0.8.0"
poetry = "^1.2.1"
pytest = "^7.1.3"
coverage = "^6.5.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
testpaths = ["./test"]
filterwarnings = ["ignore:::.*nptyping*"]
addopts = [
    "--cov=metrics_as_scores",
    "--cov-report=term-missing"
]

[tool.poe.tasks]
test = "pytest --no-cov"
cov = "pytest --cov-report html:htmlcov"
